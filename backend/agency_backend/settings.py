"""
Django settings for agency_backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config  # Add this import

# Import dj_database_url only if available (for production)
try:
    import dj_database_url
except ImportError:
    dj_database_url = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add this for Railway compatibility
import os

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-render-deployment-key-change-in-production-123456789')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Add this for Railway compatibility
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]

# Add this for Railway compatibility
if 'ALLOWED_HOSTS' in os.environ:
    ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'whitenoise.runserver_nostatic',
    
    # Local apps
    'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'agency_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'agency_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Production database (Railway/Heroku PostgreSQL)
if 'DATABASE_URL' in os.environ and dj_database_url:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
else:
    # Development database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Add this for Railway compatibility
import sys
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:'
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Add this for Railway compatibility
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static files directories
STATICFILES_DIRS = [
    BASE_DIR / 'api' / 'static',
]

# Add this for Railway compatibility
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Add this for Railway compatibility
if 'PORT' in os.environ:
    import socket
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)
    ALLOWED_HOSTS.append(local_ip)
    ALLOWED_HOSTS.append('0.0.0.0')
    ALLOWED_HOSTS.append('*')  # Allow all hosts in Railway deployment

# Admin customization - SiteGenIT Branding
ADMIN_SITE_HEADER = 'SiteGenIT Content Management System'
ADMIN_SITE_TITLE = 'SiteGenIT Admin'
ADMIN_INDEX_TITLE = 'Welcome to SiteGenIT site gen it Dashboard'

# Custom admin styling
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Template directories for custom admin templates
TEMPLATES[0]['DIRS'] = [
    BASE_DIR / 'api' / 'templates',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:5174",
    "http://127.0.0.1:5174",
]

# Allow all origins in development, specific origins in production
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    # Add your production frontend URLs here
    CORS_ALLOWED_ORIGINS.extend([
        "https://agency-website-frontend.onrender.com",
        "https://agency-website-beryl-one.vercel.app",
        "https://agency-website-git-main-sarif-mias-projects.vercel.app",
        "https://agency-website-3acnfdeya-sarif-mias-projects.vercel.app",
    ])

CORS_ALLOW_CREDENTIALS = True

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 86400
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Email Configuration
# Production settings - use SMTP backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='sitegenit@gmail.com')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='dummy-password')

# Add this for Railway compatibility
if not EMAIL_HOST_PASSWORD or EMAIL_HOST_PASSWORD in ['your-gmail-app-password-here', 'dummy-password']:
    # Fallback to console backend if no password is set
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("Warning: Using console email backend. Set EMAIL_HOST_PASSWORD for email functionality.")

DEFAULT_FROM_EMAIL = 'Agency Website <sitegenit@gmail.com>'

# Meeting Request Email Settings
MEETING_REQUEST_EMAIL = config('MEETING_REQUEST_EMAIL', default='sitegenit@gmail.com')
ADMIN_EMAIL = config('ADMIN_EMAIL', default='sitegenit@gmail.com')
